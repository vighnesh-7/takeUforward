generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id       String  @id @default(uuid())
  name     String
  username String  @unique
  email    String  @unique
  image    String?
  password String?

  role Role @default(USER)

  lastLogin     DateTime[]
  emailVerified DateTime?

  oneTimePassword String @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account[]
  profile Profile?


  Flashcard Flashcard[]

  Score Score[]
}

model Profile {
  id     String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  bio             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  id_token          String?
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@unique([provider, providerAccountId])
}




model Flashcard {
  id          String  @id @default(uuid())
  question    String
  answer      String
  difficulty  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tags        String[]
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Score {
  id          String  @id @default(uuid())
  score       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flashcardId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
